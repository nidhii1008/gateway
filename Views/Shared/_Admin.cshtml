@using IT_Gateway.Models;
@model List<DevicesModel>;
<!DOCTYPE html>
<html lang="en">
<head>
  <title>Title</title>
  <!-- Required meta tags -->
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
  @* <link rel="stylesheet" href="~/lib/css/Admin.css" /> *@
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
    integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    :root {
      --rightwidth: 350px;
      --fullpagew: 95vw;
    }
    body {
      min-height: 100vh;
      font-family: "Open Sans", sans-serif;
      margin: 0;
    }
    nav {
      position: static;
      top: 0;
    }
    .assign-content {
      border: 1px solid #ccc;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      padding: 5.5%;
      /* margin-top: 18px; */
      /* Add some padding to create space between border and content */
    }
    .main-content {
      padding: 1rem;
    }
    .left {
      width: calc(var(--fullpagew) - var(--rightwidth));
      display: inline-block;
      padding: 3%;
    }
    .right {
      display: inline-block;
      position: absolute;
      width: var(--rightwidth);
      /* box-shadow: 0px -1px 13px 4px rgba(157,157,157,0.4);
-webkit-box-shadow: 0px -1px 13px 4px rgba(157,157,157,0.4);
-moz-box-shadow: 0px -1px 13px 4px rgba(157,157,157,0.4); */
    }
    .right-text {
      padding: 3%;
    }
    .assign-btn {
      margin-top: 7.8%;
    }
    #chart-container {
      width: 300px;
      height: 300px;
      transition: .4s ease;
      opacity: 0;
      /* Initially hidden */
      margin: 20px;
    }
    /* #color-dropdown {
  } */
    /* Custom CSS for the color-dropdown */
    #color-dropdown {
      font-family: "Open Sans", sans-serif;
      /* Customize font family */
      font-size: 16px;
      /* Customize font size */
      padding-left: 10%;
      margin: 18px;
    }
    /* Customize the appearance of the dropdown box */
    #color-dropdown select {
      width: 100px;
      /* Customize the width of the dropdown box */
      padding: 7px;
      /* Add some padding to make it visually pleasing */
      border: 2px solid #ccc;
      /* Add a border */
      border-radius: 5px;
      /* Add rounded corners */
      background-color: #fff;
      /* Background color */
      color: #333;
      /* Text color */
      appearance: none;
      /* Remove default styles for certain browsers */
      -webkit-appearance: none;
      -moz-appearance: none;
      white-space: nowrap;
      /* Prevent the text from wrapping to the next line */
      overflow: hidden;
      /* Hide any overflowed text */
      text-overflow: ellipsis;
      /* Add ellipsis (...) for text overflow */
    }
    /* Style the arrow icon in the dropdown box (if supported) */
    #color-dropdown select::after {
      content: "\f078";
      /* Unicode for the arrow-down icon (font-awesome) */
      font-family: "Font Awesome 5 Free";
      /* Use Font Awesome */
      font-weight: 900;
      position: absolute;
      top: 50%;
      right: 10px;
      transform: translateY(-50%);
      pointer-events: none;
      color: #555;
      /* Arrow color */
    }
    /* Style the dropdown options */
    #color-dropdown select option {
      font-family: "Open Sans", sans-serif;
      /* Customize font family */
      font-size: 16px;
      /* Customize font size */
      color: #333;
      /* Text color */
    }
    /* Hover and Focus styles for the dropdown */
    #color-dropdown select:hover,
    #color-dropdown select:focus {
      border-color: #66afe9;
      /* Border color on hover/focus */
      outline: none;
      /* Remove the default focus outline */
    }
    #loading {
      display: flex;
      align-items: center;
      justify-content: center;
      position: absolute;
      /* height: 100%; */
      opacity: 1;
      /* Initially visible */
      transition: opacity 0.5s ease-in-out;
      /* Add fade-out transition */
    }
    footer {
      position: relative;
      bottom: 0;
      width: 100%;
      height: 10vh;
      border-top: 1px solid rgb(193, 193, 193);
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
    }
    /* .dropdown{
    position: relative;
} */
    @*@importurl('https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap');*@.fn-1 {
      font-family: 'Bebas Neue', cursive;
      font-size: 1.75em;
      /* position: absolute;
  top: 50%;
  left: 50%; */
      /* transform: translate(-50%,-50%); */
      background-image: linear-gradient(rgb(255, 183, 0), gold);
      text-align: center;
      background-repeat: no-repeat;
    }
    .btn-cus {
      background-color: #a8adb3 !important;
    }
    .btn>i {
      color: rgb(255, 183, 0) !important;
    }
    .btn:hover>i,
    .btn:focus>i {
      transition: .2s ease-in-out;
      cursor: pointer;
      color: #ffea00 !important;
    }
    .btn:active>i {
      color: #ff7301 !important;
    }
    .card {
      border: 1px solid #ccc;
      border-radius: 4%;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      padding: 25px;
      margin-bottom: 20px;
    }
    .add-devtype-btn {
      margin-top: 28%;
    }
    .last-row {
      margin-top: 3%;
      margin-bottom: 3%;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-sm navbar-dark bg-dark"
    style="min-height: 10vh; box-shadow: 0 8px 8px -8px rgba(0, 0, 0, 0.5)">
    <a class="navbar-brand" href="#"><img src="https://cginfinity.com/wp-content/uploads/2022/04/cgi-logo.svg"
        alt="" /></a>
    <ul class="navbar-nav ml-auto mr-0 mt-2 mt-lg-0">
      <li class="nav-item d-flex flex-row-reverse dropdown">
        <a class="btn" style="color: white" type="button" id="dropdownMenuButton" data-toggle="dropdown"
          aria-haspopup="true" aria-expanded="false">
          <i class="fa-solid fa-user fa-xl"></i>
        </a>
        <div class="dropdown-menu" style="
              box-shadow: 0 8px 8px -8px rgba(0, 0, 0, 0.5);
              left: auto;
              position: absolute;
            " aria-labelledby="dropdownMenuButton">
          <a class="dropdown-item" id="usernameDropdown" href="#">User Name</a>
          <a class="dropdown-item" id="userIdDropdown" href="#">User Id</a>
          <hr />
          <a class="dropdown-item" href="#"><i class="fa-solid fa-arrow-right-from-bracket"></i>Logout</a>
        </div>
      </li>
    </ul>
  </nav>
  <div class="main-content">
    <div class="left">
      <p class="fn-1">Assign a device</p>
      <div class="container">
        <form id="assignDeviceForm">
          <div class="row assign-content">
            <div class="col-6">
              <div class="form-group">
                <label for="employeeID">Employee ID:</label>
                <input type="text" class="form-control" id="employeeID" name="employee_id"
                  placeholder="Enter Employee ID">
              </div>
              <!-- Device Type Dropdown -->
              <div class="form-group">
                <label for="deviceTypeS">Device Type:</label>
                <select class="form-control" id="deviceTypeS" name="device_id">
                  @if (Model != null)
                  {
                    @foreach (var device in Model)
                    {
                      <option value="@device.device_id">@device.device_name</option>
                    }
                  }
                </select>
                @* <select class="form-control" id="deviceType" name="device_type">
                <option value="1">Laptop</option>
                <option value="2">Mouse</option>
                <option value="3">Charger</option>
                <option value="4">Keyboard</option>
                <option value="5">Other</option>
                </select> *@
              </div>
            </div>
            <div class="col-6 right-content">
              <div class="form-group">
                <label for="specificationsS">Specifications:</label>
                <select class="form-control" id="specificationsS" name="Specifications">
                  @* <option value="laptop">Laptop</option>
                  <option value="desktop">Desktop</option>
                  <option value="tablet">Tablet</option>
                  <option value="smartphone">Smartphone</option>
                  <option value="other">Other</option> *@
                </select>
              </div>
              <button type="submit" class="btn btn-dark assign-btn">Assign a Device</button>
            </div>
          </div>
        </form>
        <!-- <h6 class="right-text">Lorem ipsum dolor sit amet consectetur adipisicing elit. Vero laudantium corrupti illo ab rem ullam.</h4> -->
      </div>
    </div>
    <div class="right">
      <div id="color-dropdown">
        <label for="colors">Select an option: &nbsp;</label>
        <select id="colors" onchange="updateChart()">
          <option value="option1">Laptop</option>
          <option value="option2">Keyboard</option>
          <option value="option3">Mouse</option>
          <option value="option4">Charger</option>
        </select>
      </div>
      <div id="chart-container">
        <canvas id="myPieChart"></canvas>
      </div>
    </div>
  </div>
  <div class="container">
    <div class="row">
      <div class="col-4">
        <p class="fn-1">Add new Device-Type</p>
        <div class="card">
          <!-- Content for the first card -->
          <form id="addDeviceForm" method="post">
            <!-- Input Field -->
             <div class="form-group">
              <label for="deviceType">Device Type:</label>
             <input type="text" class="form-control" id="deviceName" name="deviceName" required>
            </div>
            <!-- Button -->
            <button type="submit" class="btn btn-dark add-devtype-btn" onclick="addDevice()">Submit</button>
          </form>
        </div>
      </div>
      <div class="col-4">
        <p class="fn-1">Add to inventory</p>
        <div class="card">
          <!-- Content for the second card -->
          <form id="addToInventoryForm">
            <!-- Device Type Dropdown -->
            <div class="form-group">
              <label for="deviceTypeA">Device Type:</label>
              <select class="form-control" id="deviceTypeA" name="device_type">
                @if (Model != null)
                {
                  @foreach (var device in Model)
                  {
                    <option value="@device.device_id">@device.device_name</option>
                  }
                }
              </select>
            </div>
            <!-- Specifications Dropdown -->
            <div class="form-group">
              <label for="specificationsA">Specifications:</label>
              <select class="form-control" id="specificationsA" name="Specifications">
              </select>
            </div>
            <!-- Button -->
            <button type="submit" class="btn btn-dark">Submit</button>
          </form>
        </div>
      </div>
      <div class="col-4">
        <p class="fn-1">Deallocating device</p>
        <div class="card">
          <form>
            <!-- Employee ID Input Field -->
            <div class="form-group">
              <label for="employeeID">Employee ID:</label>
              <input type="text" class="form-control" id="employeeID" placeholder="Enter Employee ID">
            </div>
            <!-- Device Type Dropdown -->
            <div class="form-group">
              <label for="deviceType">Device Type:</label>
              <select class="form-control" id="deviceType" name="device_">
                @if (Model != null)
                {
                  @foreach (var device in Model)
                  {
                    <option value="@device.device_id">@device.device_name</option>
                  }
                }
              </select>
            </div>
            <!-- Button -->
            <button type="submit" class="btn btn-dark">Submit</button>
          </form>
        </div>
      </div>
    </div>
    <div class="row last-row">
      <div class="col-6">
        <p class="fn-1">Add User</p>
        <div class="card">
          <!-- Content for the fourth card -->
          <form id="addUserForm"> 
            <!-- Employee ID Input Field -->
            <div class="form-group">
              <label for="employeeID">Employee ID:</label>
              <input type="text" class="form-control" id="employeeID" name="employee_id" placeholder="Enter Employee ID">
            </div>
            <!-- Username Input Field -->
            <div class="form-group">
              <label for="username">Username:</label>
              <input type="text" class="form-control" id="username" name="username" placeholder="Set Username">
            </div>
            <!-- Password Input Field -->
            <div class="form-group">
              <label for="password">Password:</label>
              <input type="password" class="form-control" id="password" name="password" placeholder="Set Password">
            </div>
            <!-- Button -->
            <button type="submit" class="btn btn-dark">Submit</button>
          </form>
        </div>
      </div>
      <div class="col-6">
        <p class="fn-1">Display devices</p>
        <div class="card">
          <!-- Content for the fifth card -->
           <form id="employeeForm">
            <!-- Employee ID Input Field -->
            <div class="form-group">
              <label for="employeeIdInput">Employee ID:</label>
              <input type="text" class="form-control" id="employeeIdInput" name="employee_id" placeholder="Enter Employee ID">
            </div>
            <!-- Readonly Text Area -->
            <div class="form-group">
              <label for="display device">Display Devices:</label>
              <textarea class="form-control" id="Display" rows="4"
                readonly>Devices will display here</textarea>
            </div>
            <!-- Button -->
            <button class="btn btn-dark mt-3" type="button" id="displayButton">Display Device</button>
          </form>
        </div>
      </div>
    </div>
  </div>
  <script>
    const ctx = document.getElementById('myPieChart').getContext('2d');
    let myPieChart;
    const dataMap = {
      option1: [40, 30, 30],
      option2: [10, 50, 40],
      option3: [20, 20, 60],
      option4: [25, 35, 40],
    };
    function updateChart() {
      const selectedOption = document.getElementById('colors').value;
      const data = dataMap[selectedOption];
      if (myPieChart) {
        myPieChart.destroy();
      }
      // Show the loading message
      setTimeout(() => {
        myPieChart = new Chart(ctx, {
          type: 'pie',
          data: {
            labels: ['Assigned', 'Unassigned', 'Repair'],
            datasets: [{
              data: data,
              backgroundColor: ['rgb(45, 194, 107)', 'rgb(40, 81, 158)', 'red'],
              borderWidth: 1
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                labels: {
                  font: {
                    size: 10
                  }
                }
              }
            }
          }
        });
        // Hide the loading message and show the chart
        document.getElementById('chart-container').style.opacity = 1;
      }); // Simulating a 2-second delay for the loading effect (you can adjust the delay as needed)
    }
    // Initial chart update on page load
    window.addEventListener('load', updateChart);
  </script>
  @* for assign a device dropdown *@
<script>
  document.addEventListener("DOMContentLoaded", function () {
    // Function to make an XHR request when the device type is selected
    function updateSpecifications() {
      var selectedDeviceId = document.getElementById("deviceTypeS").value;
      // Send the XHR request to the server endpoint
      var xhr = new XMLHttpRequest();
      xhr.open("GET", "/Home/GetSpecifications/" + selectedDeviceId, true);
      xhr.onreadystatechange = function () {
        if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
          // Parse the JSON response
          var specifications = JSON.parse(xhr.responseText);
          console.log(specifications);
          // Populate the Specifications dropdown dynamically
          var specificationsDropdown = document.getElementById("specificationsS");
          specificationsDropdown.innerHTML = ""; // Clear existing options
          // Add the new options based on the fetched specifications
          if (specifications.length === 0) {
            var option = document.createElement("option");
            option.value = "NA";
            option.textContent = "NA";
            specificationsDropdown.appendChild(option);
          } else {
            for (var i = 0; i < specifications.length; i++) {
              var option = document.createElement("option");
              option.value = specifications[i].value;
              option.textContent = specifications[i].text;
              specificationsDropdown.appendChild(option);
            }
          }
        }
      };
      xhr.send();
    }
  
      document.getElementById("deviceTypeS").addEventListener("change", updateSpecifications);
      window.onload = function (){
      updateSpecifications();
}
  
  });
</script>
@* for add to inventory dropdown *@
 <script>
    // Function to make an XHR request when the device type is selected
    document.getElementById("deviceTypeA").addEventListener("change", function() {
        var selectedDeviceId = this.value;
        // Send the XHR request to the server endpoint
        var xhr = new XMLHttpRequest();
        xhr.open("GET", "/Home/GetSpecifications/" + selectedDeviceId, true);
        xhr.onreadystatechange = function() {
            if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                // Parse the JSON response
                var specifications = JSON.parse(xhr.responseText);
  console.log(specifications);
                // Populate the Specifications dropdown dynamically
                var specificationsDropdown = document.getElementById("specificationsA");
                specificationsDropdown.innerHTML = ""; // Clear existing options
                // Add the new options based on the fetched specifications
                if (specifications.length===0){
                  var option = document.createElement("option");
                  option.value="NA";
                  option.textContent="NA";
                  specificationsDropdown.appendChild(option);
                }
                else{
                for (var i = 0; i < specifications.length; i++) {
                    var option = document.createElement("option");
                    option.value = specifications[i].value;
                    option.textContent = specifications[i].text;
                    specificationsDropdown.appendChild(option);
                }
                }
            }
        };
        xhr.send();
    });
</script>
@* //add user *@
<script>
  document.getElementById('addUserForm').addEventListener('submit', function (event) {
    event.preventDefault();
    const form = event.target;
    const formData = new FormData(form);
    const xhr = new XMLHttpRequest();
    xhr.open('POST', '/Home/Admin/AddUser');
    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status === 200) {
          alert('User added successfully.');
          // Handle success here
        } else {
          alert(`Error: ${xhr.responseText}`);
          // Handle error here
        }
      }
    };
    xhr.send(formData); // Send the form data as is (application/x-www-form-urlencoded or multipart/form-data)
  });
</script>
@* assign a device *@
<script>
    document.getElementById("assignDeviceForm").addEventListener("submit", function (event) {
        event.preventDefault();
        const formData = new FormData(event.target);
        const xhr = new XMLHttpRequest();
        xhr.open("post", "/Home/Admin/AssignDevice", true);
        xhr.setRequestHeader("Content-Type", "application/json");
        var jsonData = {};
        formData.forEach((value, key) => {
            jsonData[key] = value;
        });
        console.log(jsonData);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    const response = xhr.responseText;
                    if (response === "assigned") {
                        alert("Device successfully assigned!");
                    } else {
                        alert("All devices are already assigned.");
                    }
                } else {
                    alert("An error occurred while processing your request.");
                }
            }
        };
        xhr.send(JSON.stringify(jsonData));
    });
</script>
@* add device type *@
@* <script>
  // Fetch device types and populate the deviceTypeDropdown
  fetch("/Home/Index/GetDeviceTypes")
    .then(response => response.json())
    .then(deviceTypes => {
      const deviceTypeDropdown = document.getElementById("deviceType");
      deviceTypes.forEach(deviceType => {
        const option = document.createElement("option");
        option.value = deviceType;
        option.text = deviceType;
        deviceTypeDropdown.appendChild(option);
      });
    })
    .catch(error => {
      console.error("Error fetching device types:", error);
    });
  // Wait for the page to load
  document.addEventListener("DOMContentLoaded", () => {
    // Get the form element
    const form = document.getElementById("addToInventoryForm");
    // Add a submit event listener to the form
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      // Get the selected values for deviceType and specifications
      const deviceType = document.getElementById("deviceType").value;
      const specifications = document.getElementById("specifications").value;
      // Create a new entry for the inventoryModel
      const inventoryEntry = {
        inventory_id: "", // The server will generate the inventory_id
        device_id: 0, // We'll update this later based on the deviceType
        created_at_utc: "",
        updated_at_utc: "",
        device_state: "", // Replace this with the desired default value
        Specifications: specifications,
      };
      // Call the API to get the device_id and add the new inventory entry
      try {
        const deviceIdResponse = await fetch(`/Home/Admin/GetDeviceIdByType/${deviceType}`);
        const deviceId = await deviceIdResponse.json();
        inventoryEntry.device_id = deviceId;
        const addToInventoryResponse = await fetch("/api/AddDeviceToInventory", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(inventoryEntry),
        });
        if (addToInventoryResponse.ok) {
          // Handle success
          alert("Device added to inventory successfully.");
          form.reset(); // Clear the form inputs
        } else {
          // Handle failure
          alert("Failed to add device to inventory.");
        }
      } catch (error) {
        // Handle errors and show an error message
        alert(error.message || "An error occurred.");
      }
    });
    </script> *@
  @* addtoinventory xhr *@
<script>
  // Wait for the page to load
  document.addEventListener("DOMContentLoaded", () => {
    // Get the form element
    const form = document.getElementById("addToInventoryForm");
    // Add a submit event listener to the form
    form.addEventListener("submit", async (event) => {
      event.preventDefault();
      // Get the selected values for device_id and specifications
      const device_id = parseInt(document.getElementById("deviceTypeA").value); // Parse the device_id to an integer
      const specifications = document.getElementById("specificationsA").value;
      // Create an object with only the required parameters
      const data = {
        //device type
        device_id: device_id,
        Specifications: specifications,
      };
      // Create a new XMLHttpRequest object
      const xhr = new XMLHttpRequest();
      // Set up the request
      xhr.open("POST", "/Home/Admin/AddToInventory", true);
      xhr.setRequestHeader("Content-Type", "application/json");
      // Handle the response
      xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
          // Handle success
          alert("Device added to inventory successfully.");
          form.reset(); // Clear the form inputs
        } else {
          // Handle failure
          alert("Failed to add device to inventory.");
        }
      };
      // Handle network errors
      xhr.onerror = function () {
        alert("An error occurred while making the request.");
      };
      console.log(data);
      // Send the request with the JSON payload
      xhr.send(JSON.stringify(data));
    });
  });
</script>
@* display devices *@
<script>
    document.getElementById("displayButton").addEventListener("click", function() {
      // Get the employee ID from the input field
      var employeeIdInput = document.getElementById("employeeIdInput");
      var employeeId = parseInt(employeeIdInput.value);
      console.log(employeeId);
      // Create an XHR object
      const xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function () {
  if (xhr.readyState === XMLHttpRequest.DONE) {
    if (xhr.status === 200) {
      try {
        const data = JSON.parse(xhr.responseText);
        // Assuming the response is an array (list) of objects
        if (Array.isArray(data)) {
          // Assuming there is a textarea element with the ID 'Display'
          const displayElement = document.getElementById('Display');
          // Clear previous content if needed
          displayElement.value = '';
          // Format each item with employeeId and inventoryId in bold and separate lines
          data.forEach((item) => {
            displayElement.value += `Employee Id: ${item.employeeId}\n`;
            displayElement.value += `Serial No.: ${item.inventoryId}\n`;
            displayElement.value += `Device: ${item.deviceName}\n\n`;
          });
        } else {
          console.error('Received data is not an array:', data);
        }
      } catch (error) {
        console.error('Error parsing JSON response:', error);
      }
    } else {
      console.error('Error:', xhr.status, xhr.statusText);
    }
  }
};
    console.log(employeeId);
    xhr.send();
  });
</script> 
<script>
document.addEventListener("DOMContentLoaded", function () {
  // Function to make the XHR request and populate data
  function populateUserData() {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", "/Home/Admin/GetUsername", true);
    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE) {
        if (xhr.status === 200) {
          // Request successful, parse response and update dropdown items
          var userData = JSON.parse(xhr.responseText);
          document.getElementById("usernameDropdown").textContent =  userData.username;
          document.getElementById("userIdDropdown").textContent = "Employee Id: " +userData.employee_id;
        } else {
          // Request failed, handle error if necessary
          console.error("XHR request failed.");
        }
      }
    };
    xhr.send();
  }
  // Call the function to populate data on page load
window.onload = function (){
  populateUserData();
}
});
</script>
  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
    integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
    crossorigin="anonymous"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
    crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</body>
<footer>
  <p>© 2023 CG Infinity. All rights reserved</p>
</footer>
</html>